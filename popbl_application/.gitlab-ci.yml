image: gitlab/dind:release

stages:
  - test-model
  - build
  - test-app
  - deploy-dev
  - delivery-staging
  - deploy-staging
  - delivery-prod
  - deploy-prod
  - test-deploy-version

variables:    
  IMAGE_TEST: ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}:test_${CI_COMMIT_SHORT_SHA}${CI_COMMIT_TAG}
  IMAGE_RELEASE_STAGING: ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}:release_staging_${CI_COMMIT_SHORT_SHA}${CI_COMMIT_TAG}
  IMAGE_RELEASE_PROD: ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}:release_prod_${CI_COMMIT_SHORT_SHA}${CI_COMMIT_TAG}
  IMAGE_LATEST_STAGING: ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}:latest_staging  
  IMAGE_LATEST_PROD: ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}:latest  
  IMAGE_LATEST: ${IMAGE_LATEST_PROD}

test-model:
  stage: test-model
  image: registry.gitlab.com/haritz.saiz/popbl2/model-validator
  script:
      - apt-get update && apt-get install curl -y
      - python ml/model_validation.py web/app/app/tensorflow/model.h5 web/app/app/tensorflow/chars.txt
  only:
    - dev_model
  
build:
  stage: build
  image: docker:stable
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $IMAGE_LATEST || true
    - docker build 
          --cache-from $IMAGE_LATEST 
          --tag $IMAGE_TEST 
          --file ./web/Dockerfile.prod 
          "."
    - docker push $IMAGE_TEST
  only:
    - dev_app
    - pre_production

test-code:
  stage: test-app
  image: $IMAGE_TEST
  script:
      - cd /code
      - black . --check
      - coverage run --source=app manage.py test
      - coverage report
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
  only:
    - dev_app
    - pre_production

sonarqube:
  stage: test-app
  image: emeraldsquad/sonar-scanner:1.0.2
  variables:
    SONAR_PROJECT: popbl2
    SONAR_HOST: http://34.67.2.152:9000/
  script:
    - cd web/app
    - sonar-scanner 
          -Dsonar.projectKey=$SONAR_PROJECT 
          -Dsonar.host.url=$SONAR_HOST 
          -Dsonar.login=$SONARQUBE_AUTH 
  only:
    - dev_app
    - pre_production

deploy-dev:
  stage: deploy-dev
  image: debian:10
  before_script:
    - apt-get update -qq
    # Setup SSH deploy keys
    - 'which ssh-agent || ( apt-get install -qq openssh-client )'
    - eval $(ssh-agent -s)
    - ssh-add <(cat $SSH_DEV)
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'  
  script:       
    - |
      SSH_CMD=$(cat << EOF
        /home/ubuntu/k8s-configure.sh dev
        kubectl set image deploy django-green web=$IMAGE_TEST
        kubectl set image deploy django-blue web=$IMAGE_TEST
      EOF
      )
    - ssh ubuntu@dev.itapp.eus -i $SSH_DEV "$SSH_CMD" 
  only:
    - dev_app

delivery-staging:
  image: docker:stable
  stage: delivery-staging
  services:
    - docker:dind
  variables:
      DOCKER_DRIVER: overlay2
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $IMAGE_TEST
    - docker tag $IMAGE_TEST $IMAGE_RELEASE_STAGING
    - docker push $IMAGE_RELEASE_STAGING
    - docker tag $IMAGE_RELEASE_STAGING $IMAGE_LATEST_STAGING
    - docker push $IMAGE_LATEST_STAGING
  only:
    - pre_production

deploy-staging:
  stage: deploy-staging
  image: google/cloud-sdk:latest
  services:
    - docker:dind
  script:
    - gcloud auth activate-service-account --key-file $GOOGLE_CREDENTIALS
    - gcloud config set project $PROJECT_ID
    - gcloud container clusters get-credentials $CLUSTER_STAGING_NAME --region us-east1-d
    - |
      res=$(kubectl get svc django -o custom-columns="SELECTOR:.spec.selector.app" | tail -n 1); if [ $res == "django-blue" ]; then kubectl set image deploy/django-green web=$IMAGE_RELEASE_STAGING; kubectl scale --replicas=2 deploy.apps/django-green; kubectl rollout status deployment django-green -w ; dcolor='kubectl patch service django -p '"'"'{"spec":{"selector":{"app": "django-green", "deployment": "green" }}}'"'"''; kubectl scale --replicas=0 deploy.apps/django-blue ; else kubectl set image deploy/django-blue web=$IMAGE_RELEASE_STAGING; kubectl scale --replicas=2 deploy.apps/django-blue ;kubectl rollout status deployment django-blue -w; dcolor='kubectl patch service django -p '"'"'{"spec":{"selector":{"app": "django-blue", "deployment": "blue" }}}'"'"''; kubectl scale --replicas=0 deploy.apps/django-green;fi;  eval $dcolor; kubectl get svc -o wide

  only:
    - pre_production

delivery-prod:
  image: docker:stable
  stage: delivery-prod
  services:
    - docker:dind
  variables:
      DOCKER_DRIVER: overlay2
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $IMAGE_LATEST_STAGING
    - docker tag $IMAGE_LATEST_STAGING $IMAGE_RELEASE_PROD
    - docker push $IMAGE_RELEASE_PROD
    - docker tag $IMAGE_RELEASE_PROD $IMAGE_LATEST_PROD
    - docker push $IMAGE_LATEST_PROD
  only:
    - master

deploy-prod:
  stage: deploy-prod
  image: google/cloud-sdk:latest
  services:
    - docker:dind
  script:
    - gcloud auth activate-service-account --key-file $GOOGLE_CREDENTIALS
    - gcloud config set project $PROJECT_ID
    - gcloud container clusters get-credentials $CLUSTER_PROD_NAME --region us-east1-d
    - |
      res=$(kubectl get svc django -o custom-columns="SELECTOR:.spec.selector.app" | tail -n 1); if [ $res == "django-blue" ]; then kubectl set image deploy/django-green web=$IMAGE_RELEASE_PROD; kubectl scale --replicas=2 deploy.apps/django-green; kubectl rollout status deployment django-green -w ; dcolor='kubectl patch service django -p '"'"'{"spec":{"selector":{"app": "django-green", "deployment": "green" }}}'"'"''; kubectl scale --replicas=0 deploy.apps/django-blue ; else kubectl set image deploy/django-blue web=$IMAGE_RELEASE_PROD; kubectl scale --replicas=2 deploy.apps/django-blue ;kubectl rollout status deployment django-blue -w; dcolor='kubectl patch service django -p '"'"'{"spec":{"selector":{"app": "django-blue", "deployment": "blue" }}}'"'"''; kubectl scale --replicas=0 deploy.apps/django-green;fi;  eval $dcolor; kubectl get svc -o wide;
  only:
    - master

test-deploy-version:
  stage: test-deploy-version
  image: debian:10
  script:
      - apt-get update && apt-get install libxml2-utils -y && apt-get install wget -y
      - chmod u+x version-checker.sh
      - ./version-checker.sh
  only:
    - master

    